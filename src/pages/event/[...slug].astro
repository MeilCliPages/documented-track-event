---
import { type CollectionEntry, getCollection } from "astro:content";
import { unified } from "unified";
import remarkParse from "remark-parse";
import remarkGfm from "remark-gfm";
import remarkRehype from "remark-rehype";
import rehypeStarryNight from "rehype-starry-night";
import rehypeStringify from "rehype-stringify";
import { all } from "@wooorm/starry-night";
import EventPage from "../../layouts/EventPage.astro";
import Link from "../../components/mdx/Link.astro";
import ParametersPostfix from "../../components/mdx/ParametersPostfix.astro";
import { validateEvent, generateAndroidEvent } from "../../template";

type Event = CollectionEntry<"event">;

export async function getStaticPaths() {
    const events = await getCollection("event");
    return events.map((event: Event) => ({
        params: { slug: event.slug },
        props: event,
    }));
}
type Props = CollectionEntry<"event">;

const event = Astro.props;
const { Content, remarkPluginFrontmatter } = await event.render();

async function convertMarkdownToHtml(markdown: string): Promise<string> {
    const file = await unified()
        .use(remarkParse)
        .use(remarkGfm)
        .use(remarkRehype, { allowDangerousHtml: true })
        .use(rehypeStarryNight, { grammars: all })
        .use(rehypeStringify, { allowDangerousHtml: true })
        .process(markdown);
    return file.toString();
}

const rawEvent = validateEvent(event.data.name, event.data.description, remarkPluginFrontmatter);
const androidEvent = generateAndroidEvent(rawEvent);
const androidEventHtml = await convertMarkdownToHtml(
    `<details>\n<summary>Android</summary>\n\n\`\`\`kt\n${androidEvent}\n\`\`\`\n</details>`,
);
---

<EventPage name={event.data.name} description={event.data.description} platforms={event.data.platforms}>
    <Content
        components={{
            a: Link,
            div: ParametersPostfix,
        }}
    />
    <h2>Generated Code</h2>
    <div set:html={androidEventHtml} />
</EventPage>
