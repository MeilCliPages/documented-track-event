---
import { getCollection } from "astro:content";
import { createTypeContext } from "../../content/create-type-context";
import CommonTable from "./CommonTable.astro";
import { validateCommon, type Common, parameterPostfixType } from "../../template";

const props = Astro.props;

const platforms = props.platforms != undefined ? (props.platforms as string).split(",") : [];

const typeContext = await createTypeContext();
const commonCollection = await getCollection("common");
const commons = await Promise.all(
    commonCollection.map(async (x) => {
        const slug = x.slug;
        const renderedCommon = await x.render();
        const common = validateCommon(
            typeContext,
            x.data.name,
            x.data.description,
            x.data.platforms,
            renderedCommon.remarkPluginFrontmatter,
        );
        return [slug, common] as [string, Common];
    }),
);
---

<div {...props}>
    {props.type != parameterPostfixType && <slot />}
    {
        props.type == parameterPostfixType &&
            commons
                .filter((x) => x[1].platforms.filter((y) => platforms.includes(y)).length != 0)
                .map((x) => <CommonTable slug={x[0]} common={x[1]} />)
    }
</div>
